# Generated by Django 5.0.6 on 2024-06-08 15:40

import django.core.validators
import django.db.models.deletion
import library.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(max_length=255, verbose_name='Nombre')),
            ],
            options={
                'verbose_name': 'Categoría',
                'verbose_name_plural': 'Categorías',
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='titulo', max_length=128, null=True, verbose_name='Título')),
                ('author', models.CharField(default='desconocido', max_length=128, verbose_name='Autor')),
                ('creation_date', models.CharField(default='¿?', max_length=128, null=True, verbose_name='Editorial')),
                ('paginas', models.IntegerField(default=0, null=True, verbose_name='N° de paginas')),
                ('description', models.CharField(blank=True, default='', max_length=1024, null=True, verbose_name='Descripción')),
                ('subject', models.CharField(blank=True, default='', max_length=1024, null=True, verbose_name='Asunto')),
                ('pdf_file', models.FileField(blank=True, upload_to=library.models.UploadToPathAndRename('C:\\Users\\vx\\Downloads\\orgaLib-main\\orgaLib-main\\media\\pdf_files'), validators=[django.core.validators.FileExtensionValidator(['pdf'])], verbose_name='Archivo PDF')),
                ('category', models.ManyToManyField(blank=True, to='library.category', verbose_name='Categoría')),
            ],
            options={
                'verbose_name': 'Libro',
                'verbose_name_plural': 'Libros',
            },
        ),
        migrations.CreateModel(
            name='Favourite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.book', verbose_name='Libro')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Favorito',
                'verbose_name_plural': 'Favoritos',
            },
        ),
        migrations.CreateModel(
            name='Reader',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=16, verbose_name='Nombres')),
                ('photo', models.ImageField(blank=True, upload_to=library.models.UploadToPathAndRename('C:\\Users\\vx\\Downloads\\orgaLib-main\\orgaLib-main\\media\\profile'), verbose_name='Avatar')),
                ('email', models.EmailField(max_length=255, verbose_name='E-mail')),
                ('status', models.IntegerField(choices=[(0, 'normal'), (-1, 'overdue')], default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Lector',
                'verbose_name_plural': 'Lectores',
                'permissions': [('create_book', 'Puede crear libros'), ('delete_book', 'Puede borrar libros'), ('update_book', 'Puede cambiar la información mostrada sobre los libros')],
            },
        ),
        migrations.AddField(
            model_name='book',
            name='fav',
            field=models.ManyToManyField(blank=True, default='none', related_name='fav', to='library.reader'),
        ),
    ]
